//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `ExampleColor`.
    static let exampleColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ExampleColor")
    
    /// `UIColor(named: "ExampleColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func exampleColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.exampleColor, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `seeds.csv`.
    static let seedsCsv = Rswift.FileResource(bundle: R.hostingBundle, name: "seeds", pathExtension: "csv")
    
    /// `bundle.url(forResource: "seeds", withExtension: "csv")`
    static func seedsCsv(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.seedsCsv
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `TabItemIcon`.
    static let tabItemIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabItemIcon")
    
    /// `UIImage(named: "TabItemIcon", bundle: ..., traitCollection: ...)`
    static func tabItemIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabItemIcon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `XibCell`.
    static let xibCell = _R.nib._XibCell()
    
    /// `UINib(name: "XibCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.xibCell) instead")
    static func xibCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xibCell)
    }
    
    static func xibCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> XibCell? {
      return R.nib.xibCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XibCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LaunchViewController`.
    static let launchViewController = _R.storyboard.launchViewController()
    /// Storyboard `RealmViewController`.
    static let realmViewController = _R.storyboard.realmViewController()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LaunchViewController", bundle: ...)`
    static func launchViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchViewController)
    }
    
    /// `UIStoryboard(name: "RealmViewController", bundle: ...)`
    static func realmViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.realmViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 11 localization keys.
    struct localizable {
      /// en translation: Can't handle response data
      /// 
      /// Locales: en, ru
      static let mappingError = Rswift.StringResource(key: "mappingError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Close
      /// 
      /// Locales: en, ru
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Detail
      /// 
      /// Locales: en, ru
      static let detailModuleNavigationTitle = Rswift.StringResource(key: "detailModule.navigationTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en, ru
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Networking
      /// 
      /// Locales: en, ru
      static let networkingModuleNavigationTitle = Rswift.StringResource(key: "networkingModule.navigationTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Networking
      /// 
      /// Locales: en, ru
      static let tabTitleNetworking = Rswift.StringResource(key: "tabTitle.networking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: RealmSwift
      /// 
      /// Locales: en, ru
      static let realmModuleNavigationTitle = Rswift.StringResource(key: "realmModule.navigationTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: RealmSwift
      /// 
      /// Locales: en, ru
      static let tabTitleRealm = Rswift.StringResource(key: "tabTitle.realm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Unknown Body
      /// 
      /// Locales: en, ru
      static let codeCellUnknownBody = Rswift.StringResource(key: "codeCell.unknownBody", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Unknown ID
      /// 
      /// Locales: en, ru
      static let codeCellUnknownID = Rswift.StringResource(key: "codeCell.unknownID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Unknown Title
      /// 
      /// Locales: en, ru
      static let codeCellUnknownTitle = Rswift.StringResource(key: "codeCell.unknownTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      
      /// en translation: Can't handle response data
      /// 
      /// Locales: en, ru
      static func mappingError(_: Void = ()) -> String {
        return NSLocalizedString("mappingError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Close
      /// 
      /// Locales: en, ru
      static func close(_: Void = ()) -> String {
        return NSLocalizedString("close", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Detail
      /// 
      /// Locales: en, ru
      static func detailModuleNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("detailModule.navigationTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en, ru
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Networking
      /// 
      /// Locales: en, ru
      static func networkingModuleNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("networkingModule.navigationTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Networking
      /// 
      /// Locales: en, ru
      static func tabTitleNetworking(_: Void = ()) -> String {
        return NSLocalizedString("tabTitle.networking", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: RealmSwift
      /// 
      /// Locales: en, ru
      static func realmModuleNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("realmModule.navigationTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: RealmSwift
      /// 
      /// Locales: en, ru
      static func tabTitleRealm(_: Void = ()) -> String {
        return NSLocalizedString("tabTitle.realm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unknown Body
      /// 
      /// Locales: en, ru
      static func codeCellUnknownBody(_: Void = ()) -> String {
        return NSLocalizedString("codeCell.unknownBody", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unknown ID
      /// 
      /// Locales: en, ru
      static func codeCellUnknownID(_: Void = ()) -> String {
        return NSLocalizedString("codeCell.unknownID", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unknown Title
      /// 
      /// Locales: en, ru
      static func codeCellUnknownTitle(_: Void = ()) -> String {
        return NSLocalizedString("codeCell.unknownTitle", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _XibCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "XibCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> XibCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XibCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try launchViewController.validate()
      try realmViewController.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct launchViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LaunchViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct realmViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RealmViewController
      
      let bundle = R.hostingBundle
      let name = "RealmViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
